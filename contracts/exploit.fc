#include "imports/stdlib.fc";
#include "imports/constants.fc";

const int exploit::op::run = 1;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    (_, slice challenge_address) = get_data().begin_parse().load_msg_addr();

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    ;; You don't need to modify anything before this line.

    if (in_msg_body.slice_empty?()) {
        ~strdump("Received empty message with value (in nanotons):");
        ~dump(msg_value);
        return ();
    }

    var op = in_msg_body~load_uint(32);

    if (op == exploit::op::run) {
        ;; Example sending a message to the challenge with op 42 and query_id 0
        slice message_body = begin_cell()
            .store_uint(42, 32)
            .store_uint(0, 64)
            .end_cell()
            .begin_parse();

        ;; Example debug prints
        ~strdump("Message body:");
        ~dump(message_body);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(challenge_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_slice(message_body)
            .end_cell();
        send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
    }
}
